import{r as n,A as $,a as B,R as t,u as C,C as y,P as h,b as U,T as p,t as _,c as J,s as q,m as H,d as V,e as j,f as G,g as Q,h as T,S,i as W,j as Y,k as X,l as A,B as v,n as k,o as Z,p as N,L as ee,q as te,v as ne,w as oe,x as re,y as ae,z as se,D as le}from"./vendor.494548e6.js";const ce=function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))l(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const c of s.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&l(c)}).observe(document,{childList:!0,subtree:!0});function a(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerpolicy&&(s.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?s.credentials="include":r.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function l(r){if(r.ep)return;r.ep=!0;const s=a(r);fetch(r.href,s)}};ce();const ie={applicationName:"component-app"},w=()=>{const e=n.exports.useContext($);if(!e)throw new Error("useAuth must be inside a AuthContextProvider with a value");return e},P=n.exports.createContext(void 0),me=e=>{const{children:o}=e,[a,l]=n.exports.useState(),{auth:r}=w();return n.exports.useEffect(()=>{B({tokenFactory:()=>r==null?void 0:r.token()}).then(s=>l(s))},[r]),t.createElement(P.Provider,{value:a},o)},pe=()=>n.exports.useContext(P),O=n.exports.createContext(void 0),ue=({children:e,locationService:o})=>t.createElement(O.Provider,{value:o},e),de=()=>{const e=n.exports.useContext(O);if(!e)throw new Error("useLocationService must be inside a LocationServiceProvider with a value");return e},Ee=e=>{const[o,a]=n.exports.useState(),[l,r]=n.exports.useState(!0),[s,c]=n.exports.useState(),i=n.exports.useCallback(e,[e]);return n.exports.useEffect(()=>{i().then(a).catch(c).finally(()=>r(!1))},[i]),{data:o,loading:l,error:s}},I=n.exports.createContext(void 0),ge=e=>{const{children:o}=e,{prefix:a,componentType:l}=C(),[r,s]=n.exports.useState(),{auth:c}=w();return n.exports.useEffect(()=>{if(a&&l){const i=new y(h.fromString(a),l);U(i,{tokenFactory:()=>c==null?void 0:c.token()}).then(E=>s(E))}},[c,l,a]),t.createElement(I.Provider,{value:r},o)},fe=()=>n.exports.useContext(I),xe="_App_196rm_2";var D={App:xe};const ye=3,u=e=>e.toDegree().toFixed(ye),F=e=>t.createElement(t.Fragment,null,e.tag.name,": RA=",T.raToString(e.ra.toRadian(),!0)," DEC=",T.deToString(e.dec.toRadian(),!0)," ",t.createElement("br",null),e.frame.toString(),', Catalog="',e.catalogName,'" ',t.createElement("br",null),"Proper Motion=",e.pm.pmx,", ",e.pm.pmy,t.createElement("br",null)),R=e=>t.createElement(t.Fragment,null,e.tag.name,": Epoch of Perihelion=",e.epochOfPerihelion," ",t.createElement("br",null),"Inclination=",u(e.inclination)," degrees ",t.createElement("br",null),"Long Ascending Node=",u(e.longAscendingNode)," degrees ",t.createElement("br",null),"Argument of Perihelion=",u(e.argOfPerihelion)," degrees ",t.createElement("br",null),"Perihelion Distance=",e.perihelionDistance," AU ",t.createElement("br",null),"Eccentricity=",e.eccentricity," ",t.createElement("br",null)),K=e=>t.createElement(t.Fragment,null,e.tag.name,": Epoch=",e.epoch," ",t.createElement("br",null),"Inclination=",u(e.inclination)," degrees ",t.createElement("br",null),"Long Ascending Node=",u(e.longAscendingNode)," degrees ",t.createElement("br",null),"Argument of Perihelion=",u(e.argOfPerihelion)," degrees ",t.createElement("br",null),"Mean Distance=",e.meanDistance," AU ",t.createElement("br",null),"Eccentricity=",e.eccentricity," ",t.createElement("br",null),"Mean Anomaly=",u(e.meanAnomaly)," degrees ",t.createElement("br",null)),z=e=>t.createElement(t.Fragment,null,e.tag.name,": ",e.body.toString()),M=e=>t.createElement(t.Fragment,null,e.tag.name,": Alt=",u(e.alt)," Az=",u(e.az)),he=e=>{switch(e._type){case"EqCoord":return F(e);case"SolarSystemCoord":return z(e);case"AltAzCoord":return M(e);case"CometCoord":return R(e);case"MinorPlanetCoord":return K(e)}},d=({values:e,size:o,role:a})=>t.createElement(S,{direction:"vertical",size:o,role:a},e&&e.map((l,r)=>t.createElement(p.Text,{key:r},l))),Ce=(e,o)=>{const{keyName:a,keyTag:l}=e;switch(l){case"CoordKey":const r=o.get(Q(a));return t.createElement(d,{values:r==null?void 0:r.values.map(he),role:l});case"EqCoordKey":const s=o.get(G(a));return t.createElement(d,{values:s==null?void 0:s.values.map(F),role:l});case"AltAzCoordKey":const c=o.get(j(a));return t.createElement(d,{values:c==null?void 0:c.values.map(M),role:l});case"CometCoordKey":const i=o.get(V(a));return t.createElement(d,{values:i==null?void 0:i.values.map(R),role:l});case"MinorPlanetCoordKey":const E=o.get(H(a));return t.createElement(d,{values:E==null?void 0:E.values.map(K),role:l});case"SolarSystemCoordKey":const g=o.get(q(a));return t.createElement(d,{values:g==null?void 0:g.values.map(z),role:l});case"UTCTimeKey":const m=o.get(J(a));return t.createElement(d,{role:l,size:0,values:m==null?void 0:m.values.map((x,b)=>t.createElement(p.Text,{key:b},x.toJSON()))});case"TAITimeKey":const f=o.get(_(a));return t.createElement(d,{role:l,size:0,values:f==null?void 0:f.values.map((x,b)=>t.createElement(p.Text,{key:b},x.toJSON()))});default:return t.createElement("div",{role:l},t.createElement(p.Text,null,e.values.map(x=>JSON.stringify(x)).join(", ")))}},L=({title:e})=>t.createElement(p.Title,{level:5,style:{marginBottom:0}},e),Se=[{title:t.createElement(L,{title:"Parameter"}),dataIndex:"parameter",key:"parameter",width:"12rem"},{title:t.createElement(L,{title:"Values"}),dataIndex:"values",key:"values",render:e=>t.createElement(p.Paragraph,{ellipsis:{expandable:!0,rows:20,tooltip:!0}},e)},{title:t.createElement(L,{title:"Unit"}),dataIndex:"unit",key:"unit",width:"12rem"}],Ae=e=>e.paramSet.map(o=>({parameter:o.keyName,unit:o.units.name,values:Ce(o,e)})),ve=({currentState:e})=>t.createElement("div",{style:{marginTop:"0.5rem",height:"100%",overflowY:"scroll"}},t.createElement(W,{title:()=>`StateName : ${e.stateName}`,rowKey:o=>o.parameter,pagination:!1,columns:Se,dataSource:Ae(e),bordered:!0})),we=["TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],be=()=>{const{prefix:e}=C();return n.exports.createElement("div",{className:D.App},n.exports.createElement(Y,{style:{padding:0,width:"100%"},ghost:!1,onBack:()=>window.history.back(),title:e,extra:n.exports.createElement(Ne,null)},n.exports.createElement(ge,null,n.exports.createElement(Te,null))))},Le=()=>{const e=de(),o=X(),[a,l]=n.exports.useState([]);n.exports.useEffect(()=>{e.listByConnectionType("akka").then(s=>{console.log(s),l(s.filter(c=>c.connection.componentType==="Assembly"||c.connection.componentType==="HCD").map(c=>c.connection).sort((c,i)=>c.prefix.toJSON().localeCompare(i.prefix.toJSON())))})},[e]);const r=s=>{const[c,i]=s.split("-");o(`/${i}/${c}/`)};return n.exports.createElement("div",{className:D.App},n.exports.createElement(p.Title,{level:3}," Component Name "),n.exports.createElement(A,{showSearch:!0,placeholder:"Select a component",optionFilterProp:"children",onChange:r},a.map(s=>{const c=s.prefix.toJSON();return n.exports.createElement(A.Option,{key:c,value:`${c}-${s.componentType}`},c)})))},Te=()=>{const[e,o]=n.exports.useState(),a=fe(),l=r=>{o(r)};return n.exports.useEffect(()=>{const r=a==null?void 0:a.subscribeCurrentState(new Set([]))(l);return()=>r==null?void 0:r.cancel()},[a]),e?n.exports.createElement(ve,{currentState:e}):n.exports.createElement(n.exports.Fragment,null,"No state published by this component yet.")},Ne=()=>{const{prefix:e,componentType:o}=C(),a=pe(),l=async()=>{(e&&await(a==null?void 0:a.restart(new y(h.fromString(e),o)).catch(s=>{window.alert(`failed to restart, reason: ${s.message}`)})))==="Done"&&window.alert("component restarted")};return n.exports.createElement(S,null,n.exports.createElement(Pe,{adminService:a}),n.exports.createElement(v,{onClick:l}," Restart "),n.exports.createElement(ke,{adminService:a}))},ke=({adminService:e})=>{const{prefix:o,componentType:a}=C(),l=async()=>{const r=o&&await(e==null?void 0:e.shutdown(new y(h.fromString(o),a)).catch(s=>{window.alert(`failed to restart, reason: ${s.message}`)}));console.log("killing 2",r),r==="Done"&&window.alert("component restarted")};return n.exports.createElement(k,{id:"shutdown",placement:"topRight",overlayStyle:{width:"20%"},style:{paddingLeft:0},title:n.exports.createElement(S,{direction:"horizontal"},n.exports.createElement(p.Paragraph,null,"Are you sure, you want to shutdown?. Once Shutdown, you will not be able to start ",o," from UI.")),icon:n.exports.createElement(n.exports.Fragment,null),onConfirm:l,okText:"Confirm"},n.exports.createElement(v,{danger:!0},"Shutdown"))},Pe=({adminService:e})=>{const{prefix:o,componentType:a}=C(),[l,r]=n.exports.useState(),[s,c]=n.exports.useState(!1),[i,E]=n.exports.useState();n.exports.useEffect(()=>{o&&a&&(e==null||e.getLogMetadata(new y(h.fromString(o),a)).then(m=>{E(m.componentLevel)}))},[e,a,o,s]);const g=async()=>{(o&&a&&l&&await(e==null?void 0:e.setLogLevel(new y(h.fromString(o),a),l).catch(f=>{window.alert(`failed to set log level, reason: ${f.message}`)})))==="Done"&&(r(void 0),window.alert("Log Level Updated."))};return n.exports.createElement(k,{overlayStyle:{zIndex:1},overlayInnerStyle:{zIndex:2},id:"setLogLevel",placement:"bottom",style:{width:"100px",paddingLeft:0},title:n.exports.createElement(S,{direction:"vertical"},n.exports.createElement(p.Text,null,"Current: ",i),n.exports.createElement(p.Text,null,"Set:",n.exports.createElement(A,{style:{paddingLeft:"8px"},placeholder:"Select Level",onChange:m=>r(m),defaultValue:"INFO"},we.map(m=>n.exports.createElement(A.Option,{key:m,value:m},m))))),icon:n.exports.createElement(n.exports.Fragment,null),onCancel:()=>r(void 0),onVisibleChange:m=>{m||r(void 0),c(!s)},onConfirm:g,okText:"Set"},n.exports.createElement(v,null,"Log Level"))},Oe=!1,Ie=({loggedIn:e})=>(console.log(!Oe,e),t.createElement(Z,null,t.createElement(N,{path:"/",element:t.createElement(Le,null)}),t.createElement(N,{path:"/:componentType/:prefix/",element:t.createElement(be,null)}))),De="",Fe=()=>{var a;const{logout:e,auth:o}=w();return t.createElement(S,{style:{width:"100%",paddingTop:"40px",paddingLeft:"40px",justifyContent:"start"}},t.createElement(v,{onClick:e},"Logout ",(a=o==null?void 0:o.tokenParsed())==null?void 0:a.preferred_username))},Re=()=>{const{data:e,error:o}=Ee(()=>re().then(()=>!0)),a=ee();return o?t.createElement("div",null," Failed to load global config "):e?e?t.createElement(ue,{locationService:a},t.createElement(me,null,t.createElement(oe,{basename:De},t.createElement(Ke,null)))):t.createElement("div",null,"Loading...."):t.createElement(te,{icon:t.createElement(ne,null)})},Ke=()=>{var o;const{auth:e}=w();return t.createElement(t.Fragment,null,(e==null?void 0:e.isAuthenticated())&&t.createElement(Fe,null),t.createElement(Ie,{loggedIn:(o=e==null?void 0:e.isAuthenticated())!=null?o:!1}))};ae(ie.applicationName);se.exports.render(t.createElement(t.StrictMode,null,t.createElement(le,null,t.createElement(Re,null))),document.getElementById("root"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZjFmYjg2NDUuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3ZpdGUvbW9kdWxlcHJlbG9hZC1wb2x5ZmlsbCIsIi4uLy4uL3NyYy9jb25maWcvQXBwQ29uZmlnLmpzIiwiLi4vLi4vc3JjL2hvb2tzL3VzZUF1dGgudHN4IiwiLi4vLi4vc3JjL2NvbnRleHRzL0FkbWluU2VydmljZUNvbnRleHQudHN4IiwiLi4vLi4vc3JjL2NvbnRleHRzL0xvY2F0aW9uU2VydmljZUNvbnRleHQudHN4IiwiLi4vLi4vc3JjL2hvb2tzL3VzZVF1ZXJ5LnRzIiwiLi4vLi4vc3JjL2NvbnRleHRzL0NvbW1hbmRTZXJ2aWNlQ29udGV4dC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9QYXJhbUZvcm1hdHRlci50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9QYXJhbWV0ZXJUYWJsZS50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9NYWluLnRzeCIsIi4uLy4uL3NyYy9Sb3V0ZXMudHN4IiwiLi4vLi4vc3JjL0FwcC50c3giLCIuLi8uLi9zcmMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHAgPSBmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICBjb25zdCByZWxMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpLnJlbExpc3Q7XG4gICAgaWYgKHJlbExpc3QgJiYgcmVsTGlzdC5zdXBwb3J0cyAmJiByZWxMaXN0LnN1cHBvcnRzKCdtb2R1bGVwcmVsb2FkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGxpbmsgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGlua1tyZWw9XCJtb2R1bGVwcmVsb2FkXCJdJykpIHtcbiAgICAgICAgcHJvY2Vzc1ByZWxvYWQobGluayk7XG4gICAgfVxuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbi50eXBlICE9PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG11dGF0aW9uLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnTElOSycgJiYgbm9kZS5yZWwgPT09ICdtb2R1bGVwcmVsb2FkJylcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ByZWxvYWQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KS5vYnNlcnZlKGRvY3VtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICBmdW5jdGlvbiBnZXRGZXRjaE9wdHMoc2NyaXB0KSB7XG4gICAgICAgIGNvbnN0IGZldGNoT3B0cyA9IHt9O1xuICAgICAgICBpZiAoc2NyaXB0LmludGVncml0eSlcbiAgICAgICAgICAgIGZldGNoT3B0cy5pbnRlZ3JpdHkgPSBzY3JpcHQuaW50ZWdyaXR5O1xuICAgICAgICBpZiAoc2NyaXB0LnJlZmVycmVycG9saWN5KVxuICAgICAgICAgICAgZmV0Y2hPcHRzLnJlZmVycmVyUG9saWN5ID0gc2NyaXB0LnJlZmVycmVycG9saWN5O1xuICAgICAgICBpZiAoc2NyaXB0LmNyb3Nzb3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJylcbiAgICAgICAgICAgIGZldGNoT3B0cy5jcmVkZW50aWFscyA9ICdpbmNsdWRlJztcbiAgICAgICAgZWxzZSBpZiAoc2NyaXB0LmNyb3Nzb3JpZ2luID09PSAnYW5vbnltb3VzJylcbiAgICAgICAgICAgIGZldGNoT3B0cy5jcmVkZW50aWFscyA9ICdvbWl0JztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmV0Y2hPcHRzLmNyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJztcbiAgICAgICAgcmV0dXJuIGZldGNoT3B0cztcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc1ByZWxvYWQobGluaykge1xuICAgICAgICBpZiAobGluay5lcClcbiAgICAgICAgICAgIC8vIGVwIG1hcmtlciA9IHByb2Nlc3NlZFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsaW5rLmVwID0gdHJ1ZTtcbiAgICAgICAgLy8gcHJlcG9wdWxhdGUgdGhlIGxvYWQgcmVjb3JkXG4gICAgICAgIGNvbnN0IGZldGNoT3B0cyA9IGdldEZldGNoT3B0cyhsaW5rKTtcbiAgICAgICAgZmV0Y2gobGluay5ocmVmLCBmZXRjaE9wdHMpO1xuICAgIH1cbn07X19WSVRFX0lTX01PREVSTl9fJiZwKCk7IiwiLy8gI2FwcC1jb25maWdcbmV4cG9ydCBjb25zdCBBcHBDb25maWcgPSB7XG4gIGFwcGxpY2F0aW9uTmFtZTogJ2NvbXBvbmVudC1hcHAnXG4gIC8vQXBwbGljYXRpb24gbmFtZSBpcyB1c2VkIGZvciBjYXB0dXJpbmcgbWV0cmljcyBvZiB0aGlzIHdlYiBhcHBsaWNhdGlvbi4gSXQgaXMgYWxzbyB1c2VkIGluIHRoZSBkZXBsb3ltZW50IGFzIGEgc3ViZGlyZWN0b3J5IG5hbWVcbn1cbi8vICNhcHAtY29uZmlnXG4iLCJpbXBvcnQgeyBBdXRoQ29udGV4dCB9IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgdHlwZSB7IEF1dGhDb250ZXh0VHlwZSB9IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBjb25zdCB1c2VBdXRoID0gKCk6IEF1dGhDb250ZXh0VHlwZSA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUNvbnRleHQoQXV0aENvbnRleHQpXG4gIGlmICghY3R4KVxuICAgIHRocm93IG5ldyBFcnJvcigndXNlQXV0aCBtdXN0IGJlIGluc2lkZSBhIEF1dGhDb250ZXh0UHJvdmlkZXIgd2l0aCBhIHZhbHVlJylcbiAgcmV0dXJuIGN0eFxufVxuXG5leHBvcnQgY29uc3QgdXNlVXNlcm5hbWUgPSAoKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgeyBhdXRoIH0gPSB1c2VBdXRoKClcbiAgcmV0dXJuIGF1dGg/LnRva2VuUGFyc2VkKCk/LnByZWZlcnJlZF91c2VybmFtZVxufVxuIiwiaW1wb3J0IHsgQWRtaW5TZXJ2aWNlIH0gZnJvbSAnQHRtdHNvZnR3YXJlL2Vzdy10cydcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnLi4vaG9va3MvdXNlQXV0aCdcblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblNlcnZpY2VQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuY29uc3QgQWRtaW5TZXJ2aWNlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QWRtaW5TZXJ2aWNlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpXG5cbmNvbnN0IEFkbWluU2VydmljZVByb3ZpZGVyID0gKHByb3BzOiBBZG1pblNlcnZpY2VQcm9wcykgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wc1xuICBjb25zdCBbYWRtaW5TZXJ2aWNlLCBzZXRBZG1pblNlcnZpY2VdID0gdXNlU3RhdGU8QWRtaW5TZXJ2aWNlPigpXG4gIGNvbnN0IHsgYXV0aCB9ID0gdXNlQXV0aCgpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBBZG1pblNlcnZpY2UoeyB0b2tlbkZhY3Rvcnk6ICgpID0+IGF1dGg/LnRva2VuKCkgfSkudGhlbigoYSkgPT5cbiAgICAgIHNldEFkbWluU2VydmljZShhKVxuICAgIClcbiAgfSwgW2F1dGhdKVxuXG4gIHJldHVybiAoXG4gICAgPEFkbWluU2VydmljZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2FkbWluU2VydmljZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9BZG1pblNlcnZpY2VDb250ZXh0LlByb3ZpZGVyPlxuICApXG59XG5cbmV4cG9ydCBjb25zdCB1c2VBZG1pblNlcnZpY2UgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VDb250ZXh0KEFkbWluU2VydmljZUNvbnRleHQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkbWluU2VydmljZVByb3ZpZGVyXG4iLCJpbXBvcnQgdHlwZSB7IExvY2F0aW9uU2VydmljZSB9IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHR5cGUgeyBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBMb2NhdGlvblNlcnZpY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxMb2NhdGlvblNlcnZpY2UgfCB1bmRlZmluZWQ+KFxuICB1bmRlZmluZWRcbilcblxuZXhwb3J0IGNvbnN0IExvY2F0aW9uU2VydmljZVByb3ZpZGVyID0gKHtcbiAgY2hpbGRyZW4sXG4gIGxvY2F0aW9uU2VydmljZVxufTogUHJvcHNXaXRoQ2hpbGRyZW48eyBsb2NhdGlvblNlcnZpY2U6IExvY2F0aW9uU2VydmljZSB9Pik6IEpTWC5FbGVtZW50ID0+IChcbiAgPExvY2F0aW9uU2VydmljZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2xvY2F0aW9uU2VydmljZX0+XG4gICAge2NoaWxkcmVufVxuICA8L0xvY2F0aW9uU2VydmljZUNvbnRleHQuUHJvdmlkZXI+XG4pXG5cbmV4cG9ydCBjb25zdCB1c2VMb2NhdGlvblNlcnZpY2UgPSAoKTogTG9jYXRpb25TZXJ2aWNlID0+IHtcbiAgY29uc3QgYyA9IHVzZUNvbnRleHQoTG9jYXRpb25TZXJ2aWNlQ29udGV4dClcbiAgaWYgKCFjKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICd1c2VMb2NhdGlvblNlcnZpY2UgbXVzdCBiZSBpbnNpZGUgYSBMb2NhdGlvblNlcnZpY2VQcm92aWRlciB3aXRoIGEgdmFsdWUnXG4gICAgKVxuICByZXR1cm4gY1xufVxuIiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuZXhwb3J0IHR5cGUgUXVlcnlSZXN1bHQ8VD4gPSB7XG4gIGRhdGE6IFQgfCB1bmRlZmluZWRcbiAgbG9hZGluZzogYm9vbGVhblxuICBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IHVzZVF1ZXJ5ID0gPFQ+KHF1ZXJ5Rm46ICgpID0+IFByb21pc2U8VD4pOiBRdWVyeVJlc3VsdDxUPiA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlPFQ+KClcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxFcnJvcj4oKVxuICBjb25zdCBydW4gPSB1c2VDYWxsYmFjayhxdWVyeUZuLCBbcXVlcnlGbl0pXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcnVuKClcbiAgICAgIC50aGVuKHNldERhdGEpXG4gICAgICAuY2F0Y2goc2V0RXJyb3IpXG4gICAgICAuZmluYWxseSgoKSA9PiBzZXRMb2FkaW5nKGZhbHNlKSlcbiAgfSwgW3J1bl0pXG5cbiAgcmV0dXJuIHsgZGF0YSwgbG9hZGluZywgZXJyb3IgfVxufVxuIiwiaW1wb3J0IHtcbiAgQ29tbWFuZFNlcnZpY2UsXG4gIENvbXBvbmVudElkLFxuICBDb21wb25lbnRUeXBlLFxuICBQcmVmaXhcbn0gZnJvbSAnQHRtdHNvZnR3YXJlL2Vzdy10cydcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gJy4uL2hvb2tzL3VzZUF1dGgnXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFuZFNlcnZpY2VQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuY29uc3QgQ29tbWFuZFNlcnZpY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxDb21tYW5kU2VydmljZSB8IHVuZGVmaW5lZD4oXG4gIHVuZGVmaW5lZFxuKVxuXG5jb25zdCBDb21tYW5kU2VydmljZVByb3ZpZGVyID0gKHByb3BzOiBDb21tYW5kU2VydmljZVByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzXG4gIGNvbnN0IHsgcHJlZml4LCBjb21wb25lbnRUeXBlIH0gPSB1c2VQYXJhbXMoKVxuICBjb25zdCBbY29tbWFuZFNlcnZpY2UsIHNldENvbW1hbmRTZXJ2aWNlXSA9IHVzZVN0YXRlPENvbW1hbmRTZXJ2aWNlPigpXG4gIGNvbnN0IHsgYXV0aCB9ID0gdXNlQXV0aCgpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHByZWZpeCAmJiBjb21wb25lbnRUeXBlKSB7XG4gICAgICBjb25zdCBjb21wSWQgPSBuZXcgQ29tcG9uZW50SWQoXG4gICAgICAgIFByZWZpeC5mcm9tU3RyaW5nKHByZWZpeCksXG4gICAgICAgIGNvbXBvbmVudFR5cGUgYXMgQ29tcG9uZW50VHlwZVxuICAgICAgKVxuICAgICAgQ29tbWFuZFNlcnZpY2UoY29tcElkLCB7IHRva2VuRmFjdG9yeTogKCkgPT4gYXV0aD8udG9rZW4oKSB9KS50aGVuKChhKSA9PlxuICAgICAgICBzZXRDb21tYW5kU2VydmljZShhKVxuICAgICAgKVxuICAgIH1cbiAgfSwgW2F1dGgsIGNvbXBvbmVudFR5cGUsIHByZWZpeF0pXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWFuZFNlcnZpY2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb21tYW5kU2VydmljZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Db21tYW5kU2VydmljZUNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUNvbW1hbmRTZXJ2aWNlID0gKCkgPT4ge1xuICByZXR1cm4gdXNlQ29udGV4dChDb21tYW5kU2VydmljZUNvbnRleHQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbW1hbmRTZXJ2aWNlUHJvdmlkZXJcbiIsImltcG9ydCB7XG4gIEFsdEF6Q29vcmQsXG4gIGFsdEF6Q29vcmRLZXksXG4gIEFuZ2xlLFxuICBDb21ldENvb3JkLFxuICBjb21ldENvb3JkS2V5LFxuICBjb29yZEtleSxcbiAgQ3VycmVudFN0YXRlLFxuICBFcUNvb3JkLFxuICBlcUNvb3JkS2V5LFxuICBNaW5vclBsYW5ldENvb3JkLFxuICBtaW5vclBsYW5ldENvb3JkS2V5LFxuICBQYXJhbWV0ZXIsXG4gIFNvbGFyU3lzdGVtQ29vcmQsXG4gIHNvbGFyU3lzdGVtQ29vcmRLZXksXG4gIHRhaVRpbWVLZXksXG4gIHV0Y1RpbWVLZXlcbn0gZnJvbSAnQHRtdHNvZnR3YXJlL2Vzdy10cydcbmltcG9ydCB0eXBlIHsgQ29vcmQsIEtleSB9IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgeyBTcGFjZSwgVHlwb2dyYXBoeSB9IGZyb20gJ2FudGQnXG5pbXBvcnQgdHlwZSB7IFNwYWNlU2l6ZSB9IGZyb20gJ2FudGQvbGliL3NwYWNlJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuY29uc3QgRElHSVRTX0FGVEVSX0RFQ0lNQUwgPSAzXG5cbmNvbnN0IHVhc1RvRGVncmVlID0gKGFuZ2xlOiBBbmdsZSkgPT5cbiAgYW5nbGUudG9EZWdyZWUoKS50b0ZpeGVkKERJR0lUU19BRlRFUl9ERUNJTUFMKVxuXG5jb25zdCBmb3JtYXRFcUNvb3JkID0gKHZhbHVlOiBFcUNvb3JkKSA9PiAoXG4gIDw+XG4gICAge3ZhbHVlLnRhZy5uYW1lfTogUkE9e0FuZ2xlLnJhVG9TdHJpbmcodmFsdWUucmEudG9SYWRpYW4oKSwgdHJ1ZSl9IERFQz1cbiAgICB7QW5nbGUuZGVUb1N0cmluZyh2YWx1ZS5kZWMudG9SYWRpYW4oKSwgdHJ1ZSl9IDxiciAvPlxuICAgIHt2YWx1ZS5mcmFtZS50b1N0cmluZygpfSwgQ2F0YWxvZz0mcXVvdDt7dmFsdWUuY2F0YWxvZ05hbWV9JnF1b3Q7IDxiciAvPlxuICAgIFByb3BlciBNb3Rpb249e3ZhbHVlLnBtLnBteH0sIHt2YWx1ZS5wbS5wbXl9XG4gICAgPGJyIC8+XG4gIDwvPlxuKVxuXG5jb25zdCBmb3JtYXRDb21ldENvb3JkID0gKHZhbHVlOiBDb21ldENvb3JkKSA9PiAoXG4gIDw+XG4gICAge3ZhbHVlLnRhZy5uYW1lfTogRXBvY2ggb2YgUGVyaWhlbGlvbj17dmFsdWUuZXBvY2hPZlBlcmloZWxpb259IDxiciAvPlxuICAgIEluY2xpbmF0aW9uPXt1YXNUb0RlZ3JlZSh2YWx1ZS5pbmNsaW5hdGlvbil9IGRlZ3JlZXMgPGJyIC8+XG4gICAgTG9uZyBBc2NlbmRpbmcgTm9kZT17dWFzVG9EZWdyZWUodmFsdWUubG9uZ0FzY2VuZGluZ05vZGUpfSBkZWdyZWVzIDxiciAvPlxuICAgIEFyZ3VtZW50IG9mIFBlcmloZWxpb249e3Vhc1RvRGVncmVlKHZhbHVlLmFyZ09mUGVyaWhlbGlvbil9IGRlZ3JlZXMgPGJyIC8+XG4gICAgUGVyaWhlbGlvbiBEaXN0YW5jZT17dmFsdWUucGVyaWhlbGlvbkRpc3RhbmNlfSBBVSA8YnIgLz5cbiAgICBFY2NlbnRyaWNpdHk9e3ZhbHVlLmVjY2VudHJpY2l0eX0gPGJyIC8+XG4gIDwvPlxuKVxuXG5jb25zdCBmb3JtYXRNaW5vclBsYW5ldENvb3JkID0gKHZhbHVlOiBNaW5vclBsYW5ldENvb3JkKSA9PiAoXG4gIDw+XG4gICAge3ZhbHVlLnRhZy5uYW1lfTogRXBvY2g9e3ZhbHVlLmVwb2NofSA8YnIgLz5cbiAgICBJbmNsaW5hdGlvbj17dWFzVG9EZWdyZWUodmFsdWUuaW5jbGluYXRpb24pfSBkZWdyZWVzIDxiciAvPlxuICAgIExvbmcgQXNjZW5kaW5nIE5vZGU9e3Vhc1RvRGVncmVlKHZhbHVlLmxvbmdBc2NlbmRpbmdOb2RlKX0gZGVncmVlcyA8YnIgLz5cbiAgICBBcmd1bWVudCBvZiBQZXJpaGVsaW9uPXt1YXNUb0RlZ3JlZSh2YWx1ZS5hcmdPZlBlcmloZWxpb24pfSBkZWdyZWVzIDxiciAvPlxuICAgIE1lYW4gRGlzdGFuY2U9e3ZhbHVlLm1lYW5EaXN0YW5jZX0gQVUgPGJyIC8+XG4gICAgRWNjZW50cmljaXR5PXt2YWx1ZS5lY2NlbnRyaWNpdHl9IDxiciAvPlxuICAgIE1lYW4gQW5vbWFseT17dWFzVG9EZWdyZWUodmFsdWUubWVhbkFub21hbHkpfSBkZWdyZWVzIDxiciAvPlxuICA8Lz5cbilcblxuY29uc3QgZm9ybWF0U29sYXJTeXN0ZW1Db29yZCA9ICh2YWx1ZTogU29sYXJTeXN0ZW1Db29yZCkgPT4gKFxuICA8PlxuICAgIHt2YWx1ZS50YWcubmFtZX06IHt2YWx1ZS5ib2R5LnRvU3RyaW5nKCl9XG4gIDwvPlxuKVxuXG5jb25zdCBmb3JtYXRBbHRBekNvb3JkID0gKHZhbHVlOiBBbHRBekNvb3JkKSA9PiAoXG4gIDw+XG4gICAge3ZhbHVlLnRhZy5uYW1lfTogQWx0PXt1YXNUb0RlZ3JlZSh2YWx1ZS5hbHQpfSBBej17dWFzVG9EZWdyZWUodmFsdWUuYXopfVxuICA8Lz5cbilcblxuY29uc3QgZm9ybWF0Q29vcmQgPSAodmFsdWU6IENvb3JkKSA9PiB7XG4gIHN3aXRjaCAodmFsdWUuX3R5cGUpIHtcbiAgICBjYXNlICdFcUNvb3JkJzpcbiAgICAgIHJldHVybiBmb3JtYXRFcUNvb3JkKHZhbHVlKVxuXG4gICAgY2FzZSAnU29sYXJTeXN0ZW1Db29yZCc6XG4gICAgICByZXR1cm4gZm9ybWF0U29sYXJTeXN0ZW1Db29yZCh2YWx1ZSlcblxuICAgIGNhc2UgJ0FsdEF6Q29vcmQnOlxuICAgICAgcmV0dXJuIGZvcm1hdEFsdEF6Q29vcmQodmFsdWUpXG5cbiAgICBjYXNlICdDb21ldENvb3JkJzpcbiAgICAgIHJldHVybiBmb3JtYXRDb21ldENvb3JkKHZhbHVlKVxuXG4gICAgY2FzZSAnTWlub3JQbGFuZXRDb29yZCc6XG4gICAgICByZXR1cm4gZm9ybWF0TWlub3JQbGFuZXRDb29yZCh2YWx1ZSlcbiAgfVxufVxuXG5jb25zdCBGb3JtYXR0ZWRQYXJhbXMgPSAoe1xuICB2YWx1ZXMsXG4gIHNpemUsXG4gIHJvbGVcbn06IHtcbiAgdmFsdWVzOiBKU1guRWxlbWVudFtdIHwgdW5kZWZpbmVkXG4gIHJvbGU6IHN0cmluZ1xuICBzaXplPzogU3BhY2VTaXplXG59KSA9PiAoXG4gIDxTcGFjZSBkaXJlY3Rpb249J3ZlcnRpY2FsJyBzaXplPXtzaXplfSByb2xlPXtyb2xlfT5cbiAgICB7dmFsdWVzICYmXG4gICAgICB2YWx1ZXMubWFwKCh2YWx1ZSwgaW5kZXgpID0+IChcbiAgICAgICAgPFR5cG9ncmFwaHkuVGV4dCBrZXk9e2luZGV4fT57dmFsdWV9PC9UeXBvZ3JhcGh5LlRleHQ+XG4gICAgICApKX1cbiAgPC9TcGFjZT5cbilcblxuZXhwb3J0IGNvbnN0IGZvcm1hdFBhcmFtZXRlcnMgPSAoXG4gIHBhcmFtZXRlcjogUGFyYW1ldGVyPEtleT4sXG4gIGNvbW1hbmQ6IEN1cnJlbnRTdGF0ZVxuKTogSlNYLkVsZW1lbnQgPT4ge1xuICBjb25zdCB7IGtleU5hbWUsIGtleVRhZyB9ID0gcGFyYW1ldGVyXG4gIHN3aXRjaCAoa2V5VGFnKSB7XG4gICAgY2FzZSAnQ29vcmRLZXknOlxuICAgICAgY29uc3QgY29vcmRQYXJhbSA9IGNvbW1hbmQuZ2V0KGNvb3JkS2V5KGtleU5hbWUpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1hdHRlZFBhcmFtc1xuICAgICAgICAgIHZhbHVlcz17Y29vcmRQYXJhbT8udmFsdWVzLm1hcChmb3JtYXRDb29yZCl9XG4gICAgICAgICAgcm9sZT17a2V5VGFnfVxuICAgICAgICAvPlxuICAgICAgKVxuXG4gICAgY2FzZSAnRXFDb29yZEtleSc6XG4gICAgICBjb25zdCBlcUNvb3JkUGFyYW0gPSBjb21tYW5kLmdldChlcUNvb3JkS2V5KGtleU5hbWUpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1hdHRlZFBhcmFtc1xuICAgICAgICAgIHZhbHVlcz17ZXFDb29yZFBhcmFtPy52YWx1ZXMubWFwKGZvcm1hdEVxQ29vcmQpfVxuICAgICAgICAgIHJvbGU9e2tleVRhZ31cbiAgICAgICAgLz5cbiAgICAgIClcblxuICAgIGNhc2UgJ0FsdEF6Q29vcmRLZXknOlxuICAgICAgY29uc3Qgc29sYXJTeXN0ZW1QYXJhbXMgPSBjb21tYW5kLmdldChhbHRBekNvb3JkS2V5KGtleU5hbWUpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1hdHRlZFBhcmFtc1xuICAgICAgICAgIHZhbHVlcz17c29sYXJTeXN0ZW1QYXJhbXM/LnZhbHVlcy5tYXAoZm9ybWF0QWx0QXpDb29yZCl9XG4gICAgICAgICAgcm9sZT17a2V5VGFnfVxuICAgICAgICAvPlxuICAgICAgKVxuXG4gICAgY2FzZSAnQ29tZXRDb29yZEtleSc6XG4gICAgICBjb25zdCBjb21ldENvb3JkUGFyYW0gPSBjb21tYW5kLmdldChjb21ldENvb3JkS2V5KGtleU5hbWUpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1hdHRlZFBhcmFtc1xuICAgICAgICAgIHZhbHVlcz17Y29tZXRDb29yZFBhcmFtPy52YWx1ZXMubWFwKGZvcm1hdENvbWV0Q29vcmQpfVxuICAgICAgICAgIHJvbGU9e2tleVRhZ31cbiAgICAgICAgLz5cbiAgICAgIClcblxuICAgIGNhc2UgJ01pbm9yUGxhbmV0Q29vcmRLZXknOlxuICAgICAgY29uc3QgbWlub3JQbGFudENvb3JkUGFyYW0gPSBjb21tYW5kLmdldChtaW5vclBsYW5ldENvb3JkS2V5KGtleU5hbWUpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1hdHRlZFBhcmFtc1xuICAgICAgICAgIHZhbHVlcz17bWlub3JQbGFudENvb3JkUGFyYW0/LnZhbHVlcy5tYXAoZm9ybWF0TWlub3JQbGFuZXRDb29yZCl9XG4gICAgICAgICAgcm9sZT17a2V5VGFnfVxuICAgICAgICAvPlxuICAgICAgKVxuXG4gICAgY2FzZSAnU29sYXJTeXN0ZW1Db29yZEtleSc6XG4gICAgICBjb25zdCBzb2xhclN5c3RlbUNvb3JkUGFyYW0gPSBjb21tYW5kLmdldChzb2xhclN5c3RlbUNvb3JkS2V5KGtleU5hbWUpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1hdHRlZFBhcmFtc1xuICAgICAgICAgIHZhbHVlcz17c29sYXJTeXN0ZW1Db29yZFBhcmFtPy52YWx1ZXMubWFwKGZvcm1hdFNvbGFyU3lzdGVtQ29vcmQpfVxuICAgICAgICAgIHJvbGU9e2tleVRhZ31cbiAgICAgICAgLz5cbiAgICAgIClcblxuICAgIGNhc2UgJ1VUQ1RpbWVLZXknOlxuICAgICAgY29uc3QgdXRjVGltZVBhcmFtcyA9IGNvbW1hbmQuZ2V0KHV0Y1RpbWVLZXkoa2V5TmFtZSkpXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybWF0dGVkUGFyYW1zXG4gICAgICAgICAgcm9sZT17a2V5VGFnfVxuICAgICAgICAgIHNpemU9ezB9XG4gICAgICAgICAgdmFsdWVzPXt1dGNUaW1lUGFyYW1zPy52YWx1ZXMubWFwKCh1dGNUaW1lLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgPFR5cG9ncmFwaHkuVGV4dCBrZXk9e2luZGV4fT57dXRjVGltZS50b0pTT04oKX08L1R5cG9ncmFwaHkuVGV4dD5cbiAgICAgICAgICApKX1cbiAgICAgICAgLz5cbiAgICAgIClcblxuICAgIGNhc2UgJ1RBSVRpbWVLZXknOlxuICAgICAgY29uc3QgdGFpVGltZVBhcmFtcyA9IGNvbW1hbmQuZ2V0KHRhaVRpbWVLZXkoa2V5TmFtZSkpXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybWF0dGVkUGFyYW1zXG4gICAgICAgICAgcm9sZT17a2V5VGFnfVxuICAgICAgICAgIHNpemU9ezB9XG4gICAgICAgICAgdmFsdWVzPXt0YWlUaW1lUGFyYW1zPy52YWx1ZXMubWFwKCh0YWlUaW1lLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgPFR5cG9ncmFwaHkuVGV4dCBrZXk9e2luZGV4fT57dGFpVGltZS50b0pTT04oKX08L1R5cG9ncmFwaHkuVGV4dD5cbiAgICAgICAgICApKX1cbiAgICAgICAgLz5cbiAgICAgIClcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHJvbGU9e2tleVRhZ30+XG4gICAgICAgICAgPFR5cG9ncmFwaHkuVGV4dD5cbiAgICAgICAgICAgIHtwYXJhbWV0ZXIudmFsdWVzLm1hcCgodmFsdWUpID0+IEpTT04uc3RyaW5naWZ5KHZhbHVlKSkuam9pbignLCAnKX1cbiAgICAgICAgICA8L1R5cG9ncmFwaHkuVGV4dD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQ3VycmVudFN0YXRlIH0gZnJvbSAnQHRtdHNvZnR3YXJlL2Vzdy10cydcbmltcG9ydCB7IFRhYmxlLCBUeXBvZ3JhcGh5IH0gZnJvbSAnYW50ZCdcbmltcG9ydCB0eXBlIHsgQ29sdW1uc1R5cGUgfSBmcm9tICdhbnRkL2VzL3RhYmxlJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgZm9ybWF0UGFyYW1ldGVycyB9IGZyb20gJy4vUGFyYW1Gb3JtYXR0ZXInXG5cbmV4cG9ydCBjb25zdCBIZWFkZXJUaXRsZSA9ICh7IHRpdGxlIH06IHsgdGl0bGU6IHN0cmluZyB9KTogSlNYLkVsZW1lbnQgPT4gKFxuICA8VHlwb2dyYXBoeS5UaXRsZSBsZXZlbD17NX0gc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAwIH19PlxuICAgIHt0aXRsZX1cbiAgPC9UeXBvZ3JhcGh5LlRpdGxlPlxuKVxuXG50eXBlIFBhcmFtZXRlckRhdGFUeXBlID0ge1xuICBwYXJhbWV0ZXI6IHN0cmluZ1xuICB1bml0OiBzdHJpbmdcbiAgdmFsdWVzOiBKU1guRWxlbWVudFxufVxuXG5jb25zdCBjb2x1bW5zOiBDb2x1bW5zVHlwZTxQYXJhbWV0ZXJEYXRhVHlwZT4gPSBbXG4gIHtcbiAgICB0aXRsZTogPEhlYWRlclRpdGxlIHRpdGxlPSdQYXJhbWV0ZXInIC8+LFxuICAgIGRhdGFJbmRleDogJ3BhcmFtZXRlcicsXG4gICAga2V5OiAncGFyYW1ldGVyJyxcbiAgICB3aWR0aDogJzEycmVtJ1xuICB9LFxuICB7XG4gICAgdGl0bGU6IDxIZWFkZXJUaXRsZSB0aXRsZT0nVmFsdWVzJyAvPixcbiAgICBkYXRhSW5kZXg6ICd2YWx1ZXMnLFxuICAgIGtleTogJ3ZhbHVlcycsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Rpc3BsYXktbmFtZVxuICAgIHJlbmRlcjogKHZhbHVlczogc3RyaW5nKTogSlNYLkVsZW1lbnQgPT4gKFxuICAgICAgPFR5cG9ncmFwaHkuUGFyYWdyYXBoXG4gICAgICAgIGVsbGlwc2lzPXt7IGV4cGFuZGFibGU6IHRydWUsIHJvd3M6IDIwLCB0b29sdGlwOiB0cnVlIH19PlxuICAgICAgICB7dmFsdWVzfVxuICAgICAgPC9UeXBvZ3JhcGh5LlBhcmFncmFwaD5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogPEhlYWRlclRpdGxlIHRpdGxlPSdVbml0JyAvPixcbiAgICBkYXRhSW5kZXg6ICd1bml0JyxcbiAgICBrZXk6ICd1bml0JyxcbiAgICB3aWR0aDogJzEycmVtJ1xuICB9XG5dXG5cbmNvbnN0IGNyZWF0ZURhdGFTb3VyY2UgPSAoY3VycmVudFN0YXRlOiBDdXJyZW50U3RhdGUpOiBQYXJhbWV0ZXJEYXRhVHlwZVtdID0+IHtcbiAgcmV0dXJuIGN1cnJlbnRTdGF0ZS5wYXJhbVNldC5tYXAoKHBhcmFtZXRlcikgPT4gKHtcbiAgICBwYXJhbWV0ZXI6IHBhcmFtZXRlci5rZXlOYW1lLFxuICAgIHVuaXQ6IHBhcmFtZXRlci51bml0cy5uYW1lLFxuICAgIHZhbHVlczogZm9ybWF0UGFyYW1ldGVycyhwYXJhbWV0ZXIsIGN1cnJlbnRTdGF0ZSlcbiAgfSkpXG59XG5cbmV4cG9ydCBjb25zdCBQYXJhbWV0ZXJUYWJsZSA9ICh7XG4gIGN1cnJlbnRTdGF0ZVxufToge1xuICBjdXJyZW50U3RhdGU6IEN1cnJlbnRTdGF0ZVxufSk6IEpTWC5FbGVtZW50ID0+IChcbiAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICcwLjVyZW0nLCBoZWlnaHQ6ICcxMDAlJywgb3ZlcmZsb3dZOiAnc2Nyb2xsJyB9fT5cbiAgICA8VGFibGVcbiAgICAgIHRpdGxlPXsoKSA9PiBgU3RhdGVOYW1lIDogJHtjdXJyZW50U3RhdGUuc3RhdGVOYW1lfWB9XG4gICAgICByb3dLZXk9eyhyb3cpID0+IHJvdy5wYXJhbWV0ZXJ9XG4gICAgICBwYWdpbmF0aW9uPXtmYWxzZX1cbiAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICBkYXRhU291cmNlPXtjcmVhdGVEYXRhU291cmNlKGN1cnJlbnRTdGF0ZSl9XG4gICAgICBib3JkZXJlZFxuICAgIC8+XG4gIDwvZGl2PlxuKVxuIiwiaW1wb3J0IHtcbiAgQWRtaW5TZXJ2aWNlLFxuICBDb21wb25lbnRJZCxcbiAgQ29tcG9uZW50VHlwZSxcbiAgQ29ubmVjdGlvbixcbiAgQ3VycmVudFN0YXRlLFxuICBMZXZlbCxcbiAgUHJlZml4XG59IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgeyBCdXR0b24sIFBhZ2VIZWFkZXIsIFBvcGNvbmZpcm0sIFNlbGVjdCwgU3BhY2UsIFR5cG9ncmFwaHkgfSBmcm9tICdhbnRkJ1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSwgdXNlUGFyYW1zIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7IHVzZUFkbWluU2VydmljZSB9IGZyb20gJy4uL2NvbnRleHRzL0FkbWluU2VydmljZUNvbnRleHQnXG5pbXBvcnQgQ29tbWFuZFNlcnZpY2VQcm92aWRlciwge1xuICB1c2VDb21tYW5kU2VydmljZVxufSBmcm9tICcuLi9jb250ZXh0cy9Db21tYW5kU2VydmljZUNvbnRleHQnXG5pbXBvcnQgeyB1c2VMb2NhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9jb250ZXh0cy9Mb2NhdGlvblNlcnZpY2VDb250ZXh0J1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL01haW4ubW9kdWxlLmNzcydcbmltcG9ydCB7IFBhcmFtZXRlclRhYmxlIH0gZnJvbSAnLi9QYXJhbWV0ZXJUYWJsZSdcblxuY29uc3QgbGV2ZWxzOiBMZXZlbFtdID0gWydUUkFDRScsICdERUJVRycsICdJTkZPJywgJ1dBUk4nLCAnRVJST1InLCAnRkFUQUwnXVxuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgeyBwcmVmaXggfSA9IHVzZVBhcmFtcygpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLkFwcH0+XG4gICAgICA8UGFnZUhlYWRlclxuICAgICAgICBzdHlsZT17eyBwYWRkaW5nOiAwLCB3aWR0aDogJzEwMCUnIH19XG4gICAgICAgIGdob3N0PXtmYWxzZX1cbiAgICAgICAgb25CYWNrPXsoKSA9PiB3aW5kb3cuaGlzdG9yeS5iYWNrKCl9XG4gICAgICAgIHRpdGxlPXtwcmVmaXh9XG4gICAgICAgIGV4dHJhPXs8QWRtaW5CdXR0b25zIC8+fT5cbiAgICAgICAgPENvbW1hbmRTZXJ2aWNlUHJvdmlkZXI+XG4gICAgICAgICAgPExpc3RDdXJyZW50U3RhdGUgLz5cbiAgICAgICAgPC9Db21tYW5kU2VydmljZVByb3ZpZGVyPlxuICAgICAgPC9QYWdlSGVhZGVyPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnRMaXN0ID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgbG9jYXRpb25TZXJ2aWNlID0gdXNlTG9jYXRpb25TZXJ2aWNlKClcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG4gIGNvbnN0IFtjb21wb25lbnRDb25uZWN0aW9ucywgc2V0Q29tcENvbm5lY3Rpb25zXSA9IFJlYWN0LnVzZVN0YXRlPFxuICAgIENvbm5lY3Rpb25bXVxuICA+KFtdKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxvY2F0aW9uU2VydmljZS5saXN0QnlDb25uZWN0aW9uVHlwZSgnYWtrYScpLnRoZW4oKGwpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGwpXG4gICAgICBzZXRDb21wQ29ubmVjdGlvbnMoXG4gICAgICAgIGxcbiAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgKGNvbXBMb2NhdGlvbikgPT5cbiAgICAgICAgICAgICAgY29tcExvY2F0aW9uLmNvbm5lY3Rpb24uY29tcG9uZW50VHlwZSA9PT0gJ0Fzc2VtYmx5JyB8fFxuICAgICAgICAgICAgICBjb21wTG9jYXRpb24uY29ubmVjdGlvbi5jb21wb25lbnRUeXBlID09PSAnSENEJ1xuICAgICAgICAgIClcbiAgICAgICAgICAubWFwKChsbykgPT4gbG8uY29ubmVjdGlvbilcbiAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5wcmVmaXgudG9KU09OKCkubG9jYWxlQ29tcGFyZShiLnByZWZpeC50b0pTT04oKSkpXG4gICAgICApXG4gICAgfSlcbiAgfSwgW2xvY2F0aW9uU2VydmljZV0pXG5cbiAgY29uc3Qgb25TZWxlY3QgPSAoY29ubmVjdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgW3ByZWZpeCwgY29tcG9uZW50VHlwZV0gPSBjb25uZWN0aW9uLnNwbGl0KCctJylcbiAgICBuYXZpZ2F0ZShgLyR7Y29tcG9uZW50VHlwZX0vJHtwcmVmaXh9L2ApXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLkFwcH0+XG4gICAgICA8VHlwb2dyYXBoeS5UaXRsZSBsZXZlbD17M30+IENvbXBvbmVudCBOYW1lIDwvVHlwb2dyYXBoeS5UaXRsZT5cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgc2hvd1NlYXJjaFxuICAgICAgICBwbGFjZWhvbGRlcj0nU2VsZWN0IGEgY29tcG9uZW50J1xuICAgICAgICBvcHRpb25GaWx0ZXJQcm9wPSdjaGlsZHJlbidcbiAgICAgICAgb25DaGFuZ2U9e29uU2VsZWN0fT5cbiAgICAgICAge2NvbXBvbmVudENvbm5lY3Rpb25zLm1hcCgoY29uKSA9PiB7XG4gICAgICAgICAgY29uc3QgcHJlZml4ID0gY29uLnByZWZpeC50b0pTT04oKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8U2VsZWN0Lk9wdGlvblxuICAgICAgICAgICAgICBrZXk9e3ByZWZpeH1cbiAgICAgICAgICAgICAgdmFsdWU9e2Ake3ByZWZpeH0tJHtjb24uY29tcG9uZW50VHlwZX1gfT5cbiAgICAgICAgICAgICAge3ByZWZpeH1cbiAgICAgICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cbiAgICAgICAgICApXG4gICAgICAgIH0pfVxuICAgICAgPC9TZWxlY3Q+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgTGlzdEN1cnJlbnRTdGF0ZSA9ICgpID0+IHtcbiAgY29uc3QgW2N1cnJlbnRTdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGU8Q3VycmVudFN0YXRlPigpXG5cbiAgY29uc3QgY29tbWFuZFNlcnZpY2UgPSB1c2VDb21tYW5kU2VydmljZSgpXG4gIGNvbnN0IG9uU3RhdGUgPSAoY3VycmVudFN0YXRlOiBDdXJyZW50U3RhdGUpID0+IHtcbiAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUpXG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNvbW1hbmRTZXJ2aWNlPy5zdWJzY3JpYmVDdXJyZW50U3RhdGUobmV3IFNldChbXSkpKFxuICAgICAgb25TdGF0ZVxuICAgIClcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaXB0aW9uPy5jYW5jZWwoKVxuICB9LCBbY29tbWFuZFNlcnZpY2VdKVxuICByZXR1cm4gY3VycmVudFN0YXRlID8gKFxuICAgIDxQYXJhbWV0ZXJUYWJsZSBjdXJyZW50U3RhdGU9e2N1cnJlbnRTdGF0ZX0gLz5cbiAgKSA6IChcbiAgICA8Pk5vIHN0YXRlIHB1Ymxpc2hlZCBieSB0aGlzIGNvbXBvbmVudCB5ZXQuPC8+XG4gIClcbn1cblxuY29uc3QgQWRtaW5CdXR0b25zID0gKCkgPT4ge1xuICBjb25zdCB7IHByZWZpeCwgY29tcG9uZW50VHlwZSB9ID0gdXNlUGFyYW1zKClcbiAgY29uc3QgYWRtaW5TZXJ2aWNlID0gdXNlQWRtaW5TZXJ2aWNlKClcblxuICBjb25zdCByZXN0YXJ0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID1cbiAgICAgIHByZWZpeCAmJlxuICAgICAgKGF3YWl0IGFkbWluU2VydmljZVxuICAgICAgICA/LnJlc3RhcnQoXG4gICAgICAgICAgbmV3IENvbXBvbmVudElkKFxuICAgICAgICAgICAgUHJlZml4LmZyb21TdHJpbmcocHJlZml4KSxcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgYXMgQ29tcG9uZW50VHlwZVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICB3aW5kb3cuYWxlcnQoYGZhaWxlZCB0byByZXN0YXJ0LCByZWFzb246ICR7ZS5tZXNzYWdlfWApXG4gICAgICAgIH0pKVxuICAgIGlmIChyZXNwb25zZSA9PT0gJ0RvbmUnKSB3aW5kb3cuYWxlcnQoJ2NvbXBvbmVudCByZXN0YXJ0ZWQnKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8U3BhY2U+XG4gICAgICA8U2V0TG9nIGFkbWluU2VydmljZT17YWRtaW5TZXJ2aWNlfSAvPlxuICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtyZXN0YXJ0fT4gUmVzdGFydCA8L0J1dHRvbj5cbiAgICAgIDxTaHV0ZG93biBhZG1pblNlcnZpY2U9e2FkbWluU2VydmljZX0gLz5cbiAgICA8L1NwYWNlPlxuICApXG59XG5cbmNvbnN0IFNodXRkb3duID0gKHsgYWRtaW5TZXJ2aWNlIH06IHsgYWRtaW5TZXJ2aWNlPzogQWRtaW5TZXJ2aWNlIH0pID0+IHtcbiAgY29uc3QgeyBwcmVmaXgsIGNvbXBvbmVudFR5cGUgfSA9IHVzZVBhcmFtcygpXG4gIGNvbnN0IHNodXRkb3duID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID1cbiAgICAgIHByZWZpeCAmJlxuICAgICAgKGF3YWl0IGFkbWluU2VydmljZVxuICAgICAgICA/LnNodXRkb3duKFxuICAgICAgICAgIG5ldyBDb21wb25lbnRJZChcbiAgICAgICAgICAgIFByZWZpeC5mcm9tU3RyaW5nKHByZWZpeCksXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlIGFzIENvbXBvbmVudFR5cGVcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgd2luZG93LmFsZXJ0KGBmYWlsZWQgdG8gcmVzdGFydCwgcmVhc29uOiAke2UubWVzc2FnZX1gKVxuICAgICAgICB9KSlcbiAgICBjb25zb2xlLmxvZygna2lsbGluZyAyJywgcmVzcG9uc2UpXG4gICAgaWYgKHJlc3BvbnNlID09PSAnRG9uZScpIHdpbmRvdy5hbGVydCgnY29tcG9uZW50IHJlc3RhcnRlZCcpXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8UG9wY29uZmlybVxuICAgICAgaWQ9J3NodXRkb3duJ1xuICAgICAgcGxhY2VtZW50PSd0b3BSaWdodCdcbiAgICAgIG92ZXJsYXlTdHlsZT17eyB3aWR0aDogJzIwJScgfX1cbiAgICAgIHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiAwIH19XG4gICAgICB0aXRsZT17XG4gICAgICAgIDxTcGFjZSBkaXJlY3Rpb249J2hvcml6b250YWwnPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5LlBhcmFncmFwaD5cbiAgICAgICAgICAgIEFyZSB5b3Ugc3VyZSwgeW91IHdhbnQgdG8gc2h1dGRvd24/LiBPbmNlIFNodXRkb3duLCB5b3Ugd2lsbCBub3QgYmVcbiAgICAgICAgICAgIGFibGUgdG8gc3RhcnQge3ByZWZpeH0gZnJvbSBVSS5cbiAgICAgICAgICA8L1R5cG9ncmFwaHkuUGFyYWdyYXBoPlxuICAgICAgICA8L1NwYWNlPlxuICAgICAgfVxuICAgICAgaWNvbj17PD48Lz59XG4gICAgICBvbkNvbmZpcm09e3NodXRkb3dufVxuICAgICAgb2tUZXh0PSdDb25maXJtJz5cbiAgICAgIDxCdXR0b24gZGFuZ2VyPlNodXRkb3duPC9CdXR0b24+XG4gICAgPC9Qb3Bjb25maXJtPlxuICApXG59XG5jb25zdCBTZXRMb2cgPSAoeyBhZG1pblNlcnZpY2UgfTogeyBhZG1pblNlcnZpY2U/OiBBZG1pblNlcnZpY2UgfSkgPT4ge1xuICBjb25zdCB7IHByZWZpeCwgY29tcG9uZW50VHlwZSB9ID0gdXNlUGFyYW1zKClcbiAgY29uc3QgW2xldmVsLCBzZXRMZXZlbF0gPSBSZWFjdC51c2VTdGF0ZTxMZXZlbCB8IHVuZGVmaW5lZD4oKVxuICBjb25zdCBbdmlzaWJsZSwgc2V0VmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW2N1cnJlbnRMZXZlbCwgc2V0Q3VycmVudExldmVsXSA9IFJlYWN0LnVzZVN0YXRlPExldmVsIHwgdW5kZWZpbmVkPigpXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJlZml4ICYmIGNvbXBvbmVudFR5cGUpXG4gICAgICBhZG1pblNlcnZpY2VcbiAgICAgICAgPy5nZXRMb2dNZXRhZGF0YShcbiAgICAgICAgICBuZXcgQ29tcG9uZW50SWQoXG4gICAgICAgICAgICBQcmVmaXguZnJvbVN0cmluZyhwcmVmaXgpLFxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSBhcyBDb21wb25lbnRUeXBlXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIC50aGVuKChtZXRhZGF0YSkgPT4ge1xuICAgICAgICAgIHNldEN1cnJlbnRMZXZlbChtZXRhZGF0YS5jb21wb25lbnRMZXZlbClcbiAgICAgICAgfSlcbiAgfSwgW2FkbWluU2VydmljZSwgY29tcG9uZW50VHlwZSwgcHJlZml4LCB2aXNpYmxlXSlcblxuICBjb25zdCBsb2dMZXZlbCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9XG4gICAgICBwcmVmaXggJiZcbiAgICAgIGNvbXBvbmVudFR5cGUgJiZcbiAgICAgIGxldmVsICYmXG4gICAgICAoYXdhaXQgYWRtaW5TZXJ2aWNlXG4gICAgICAgID8uc2V0TG9nTGV2ZWwoXG4gICAgICAgICAgbmV3IENvbXBvbmVudElkKFxuICAgICAgICAgICAgUHJlZml4LmZyb21TdHJpbmcocHJlZml4KSxcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgYXMgQ29tcG9uZW50VHlwZVxuICAgICAgICAgICksXG4gICAgICAgICAgbGV2ZWxcbiAgICAgICAgKVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICB3aW5kb3cuYWxlcnQoYGZhaWxlZCB0byBzZXQgbG9nIGxldmVsLCByZWFzb246ICR7ZS5tZXNzYWdlfWApXG4gICAgICAgIH0pKVxuICAgIGlmIChyZXNwb25zZSA9PT0gJ0RvbmUnKSB7XG4gICAgICBzZXRMZXZlbCh1bmRlZmluZWQpXG4gICAgICB3aW5kb3cuYWxlcnQoJ0xvZyBMZXZlbCBVcGRhdGVkLicpXG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgPFBvcGNvbmZpcm1cbiAgICAgIG92ZXJsYXlTdHlsZT17eyB6SW5kZXg6IDEgfX1cbiAgICAgIG92ZXJsYXlJbm5lclN0eWxlPXt7IHpJbmRleDogMiB9fVxuICAgICAgaWQ9J3NldExvZ0xldmVsJ1xuICAgICAgcGxhY2VtZW50PSdib3R0b20nXG4gICAgICBzdHlsZT17eyB3aWR0aDogJzEwMHB4JywgcGFkZGluZ0xlZnQ6IDAgfX1cbiAgICAgIHRpdGxlPXtcbiAgICAgICAgPFNwYWNlIGRpcmVjdGlvbj0ndmVydGljYWwnPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5LlRleHQ+Q3VycmVudDoge2N1cnJlbnRMZXZlbH08L1R5cG9ncmFwaHkuVGV4dD5cbiAgICAgICAgICA8VHlwb2dyYXBoeS5UZXh0PlxuICAgICAgICAgICAgU2V0OlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBzdHlsZT17eyBwYWRkaW5nTGVmdDogJzhweCcgfX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9J1NlbGVjdCBMZXZlbCdcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRMZXZlbChlKX1cbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXsnSU5GTycgYXMgTGV2ZWx9PlxuICAgICAgICAgICAgICB7bGV2ZWxzLm1hcCgobCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTZWxlY3QuT3B0aW9uIGtleT17bH0gdmFsdWU9e2x9PlxuICAgICAgICAgICAgICAgICAge2x9XG4gICAgICAgICAgICAgICAgPC9TZWxlY3QuT3B0aW9uPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgIDwvVHlwb2dyYXBoeS5UZXh0PlxuICAgICAgICA8L1NwYWNlPlxuICAgICAgfVxuICAgICAgaWNvbj17PD48Lz59XG4gICAgICBvbkNhbmNlbD17KCkgPT4gc2V0TGV2ZWwodW5kZWZpbmVkKX1cbiAgICAgIG9uVmlzaWJsZUNoYW5nZT17KF92aXNpYmxlKSA9PiB7XG4gICAgICAgIGlmICghX3Zpc2libGUpIHtcbiAgICAgICAgICBzZXRMZXZlbCh1bmRlZmluZWQpXG4gICAgICAgIH1cbiAgICAgICAgc2V0VmlzaWJsZSghdmlzaWJsZSlcbiAgICAgIH19XG4gICAgICBvbkNvbmZpcm09e2xvZ0xldmVsfVxuICAgICAgb2tUZXh0PSdTZXQnPlxuICAgICAgPEJ1dHRvbj5Mb2cgTGV2ZWw8L0J1dHRvbj5cbiAgICA8L1BvcGNvbmZpcm0+XG4gIClcbn1cbiIsImltcG9ydCB7IExvYWRpbmdPdXRsaW5lZCB9IGZyb20gJ0BhbnQtZGVzaWduL2ljb25zJ1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnYW50ZCdcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFJvdXRlLCBSb3V0ZXMgYXMgUm91dGVyUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50TGlzdCB9IGZyb20gJy4vY29tcG9uZW50cy9NYWluJ1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gJy4vaG9va3MvdXNlQXV0aCdcbmNvbnN0IEFVVEhfTU9ERSA9IGltcG9ydC5tZXRhLmVudi5WSVRFX0FVVEhfTU9ERSA9PT0gJ3RydWUnXG5cbmNvbnN0IFJlZGlyZWN0VG9Mb2dpbiA9ICgpID0+IHtcbiAgY29uc3QgeyBsb2dpbiB9ID0gdXNlQXV0aCgpXG5cbiAgdXNlRWZmZWN0KGxvZ2luLCBbbG9naW5dKVxuXG4gIHJldHVybiA8UmVzdWx0IGljb249ezxMb2FkaW5nT3V0bGluZWQgLz59IC8+XG59XG5cbmV4cG9ydCBjb25zdCBSb3V0ZXMgPSAoeyBsb2dnZWRJbiB9OiB7IGxvZ2dlZEluOiBib29sZWFuIH0pOiBKU1guRWxlbWVudCA9PiB7XG4gIGNvbnNvbGUubG9nKCFBVVRIX01PREUsIGxvZ2dlZEluKVxuICByZXR1cm4gIUFVVEhfTU9ERSB8fCBsb2dnZWRJbiA/IChcbiAgICA8Um91dGVyUm91dGVzPlxuICAgICAgPFJvdXRlIHBhdGg9eycvJ30gZWxlbWVudD17PENvbXBvbmVudExpc3QgLz59IC8+XG4gICAgICA8Um91dGUgcGF0aD17Jy86Y29tcG9uZW50VHlwZS86cHJlZml4Lyd9IGVsZW1lbnQ9ezxDb21wb25lbnQgLz59IC8+XG4gICAgPC9Sb3V0ZXJSb3V0ZXM+XG4gICkgOiAoXG4gICAgPFJlZGlyZWN0VG9Mb2dpbiAvPlxuICApXG59XG4iLCJpbXBvcnQgeyBMb2FkaW5nT3V0bGluZWQgfSBmcm9tICdAYW50LWRlc2lnbi9pY29ucydcbmltcG9ydCB7IGxvYWRHbG9iYWxDb25maWcsIExvY2F0aW9uU2VydmljZSB9IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgeyBCdXR0b24sIFJlc3VsdCwgU3BhY2UgfSBmcm9tICdhbnRkJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvQXBwQ29uZmlnJ1xuaW1wb3J0IEFkbWluU2VydmljZUNvbnRleHQgZnJvbSAnLi9jb250ZXh0cy9BZG1pblNlcnZpY2VDb250ZXh0J1xuaW1wb3J0IHsgTG9jYXRpb25TZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2NvbnRleHRzL0xvY2F0aW9uU2VydmljZUNvbnRleHQnXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnLi9ob29rcy91c2VBdXRoJ1xuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tICcuL2hvb2tzL3VzZVF1ZXJ5J1xuaW1wb3J0IHsgUm91dGVzIH0gZnJvbSAnLi9Sb3V0ZXMnXG5cbmNvbnN0IGJhc2VuYW1lID1cbiAgaW1wb3J0Lm1ldGEuZW52LlBST0QgPT09ICdwcm9kdWN0aW9uJyA/IGAvJHtBcHBDb25maWcuYXBwbGljYXRpb25OYW1lfWAgOiAnJ1xuXG5jb25zdCBMb2dvdXQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgbG9nb3V0LCBhdXRoIH0gPSB1c2VBdXRoKClcbiAgcmV0dXJuIChcbiAgICA8U3BhY2VcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmdUb3A6ICc0MHB4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc0MHB4JyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzdGFydCdcbiAgICAgIH19PlxuICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtsb2dvdXR9PlxuICAgICAgICBMb2dvdXQge2F1dGg/LnRva2VuUGFyc2VkKCk/LnByZWZlcnJlZF91c2VybmFtZX1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvU3BhY2U+XG4gIClcbn1cblxuY29uc3QgQXBwID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgeyBkYXRhOiBpbml0aWFsaXNlZCwgZXJyb3IgfSA9IHVzZVF1ZXJ5KCgpID0+XG4gICAgbG9hZEdsb2JhbENvbmZpZygpLnRoZW4oKCkgPT4gdHJ1ZSlcbiAgKVxuICBjb25zdCBsb2NhdGlvblNlcnZpY2UgPSBMb2NhdGlvblNlcnZpY2UoKVxuICBpZiAoZXJyb3IpIHJldHVybiA8ZGl2PiBGYWlsZWQgdG8gbG9hZCBnbG9iYWwgY29uZmlnIDwvZGl2PlxuICBpZiAoIWluaXRpYWxpc2VkKSByZXR1cm4gPFJlc3VsdCBpY29uPXs8TG9hZGluZ091dGxpbmVkIC8+fSAvPlxuXG4gIHJldHVybiBpbml0aWFsaXNlZCA/IChcbiAgICA8TG9jYXRpb25TZXJ2aWNlUHJvdmlkZXIgbG9jYXRpb25TZXJ2aWNlPXtsb2NhdGlvblNlcnZpY2V9PlxuICAgICAgPEFkbWluU2VydmljZUNvbnRleHQ+XG4gICAgICAgIDxSb3V0ZXIgYmFzZW5hbWU9e2Jhc2VuYW1lfT5cbiAgICAgICAgICA8QXV0aFJvdXRlcyAvPlxuICAgICAgICA8L1JvdXRlcj5cbiAgICAgIDwvQWRtaW5TZXJ2aWNlQ29udGV4dD5cbiAgICA8L0xvY2F0aW9uU2VydmljZVByb3ZpZGVyPlxuICApIDogKFxuICAgIDxkaXY+TG9hZGluZy4uLi48L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBBdXRoUm91dGVzID0gKCkgPT4ge1xuICBjb25zdCB7IGF1dGggfSA9IHVzZUF1dGgoKVxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7YXV0aD8uaXNBdXRoZW50aWNhdGVkKCkgJiYgPExvZ291dCAvPn1cbiAgICAgIDxSb3V0ZXMgbG9nZ2VkSW49e2F1dGg/LmlzQXV0aGVudGljYXRlZCgpID8/IGZhbHNlfSAvPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFxuIiwiaW1wb3J0IHsgQXV0aENvbnRleHRQcm92aWRlciwgc2V0QXBwTmFtZSB9IGZyb20gJ0B0bXRzb2Z0d2FyZS9lc3ctdHMnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJ1xuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvQXBwQ29uZmlnJ1xuaW1wb3J0ICcuL2luZGV4LmNzcydcbmltcG9ydCAnYW50ZC9kaXN0L2FudGQuY3NzJ1xuXG5zZXRBcHBOYW1lKEFwcENvbmZpZy5hcHBsaWNhdGlvbk5hbWUpXG5jb25zdCBBVVRIX01PREUgPSBpbXBvcnQubWV0YS5lbnYuVklURV9BVVRIX01PREUgPT09ICd0cnVlJ1xucmVuZGVyKFxuICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICB7IUFVVEhfTU9ERSA/IChcbiAgICAgIDxBdXRoQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICA8QXBwIC8+XG4gICAgICA8L0F1dGhDb250ZXh0UHJvdmlkZXI+XG4gICAgKSA6IChcbiAgICAgIDxBcHAgLz5cbiAgICApfVxuICA8L1JlYWN0LlN0cmljdE1vZGU+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pXG4iXSwibmFtZXMiOlsidXNlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwiUmVhY3QudXNlU3RhdGUiLCJSb3V0ZXJSb3V0ZXMiLCJBZG1pblNlcnZpY2VDb250ZXh0IiwiUm91dGVyIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiMFJBQUEsS0FBTSxJQUFJLFVBQW9CLENBQzFCLEtBQU0sR0FBVSxTQUFTLGNBQWMsUUFBUSxRQUMvQyxHQUFJLEdBQVcsRUFBUSxVQUFZLEVBQVEsU0FBUyxpQkFDaEQsT0FFSixTQUFXLEtBQVEsVUFBUyxpQkFBaUIsNkJBQ3pDLEVB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
